import pandas as pd
import numpy as np

from workflows.base_workflow import BaseWorkflow
from core.visualization.cluster_visualization import visualize_clusters_pca

from sklearn.ensemble import RandomForestClassifier

class MalwareClusteringWorkflow(BaseWorkflow):
    """
     A workflow designed to analyze and cluster malware samples based on extracted features.

    Goals:
    - Group malware samples into clusters based on shared characteristics (e.g., file size, entropy, YARA matches).
    - Identify relationships between malware families, shared toolkits, or development patterns.
    - Detect emerging threats or anomalies not fitting into existing clusters.
    - Provide insights for threat attribution and proactive defense.

    Key Capabilities:
    - Static Feature Analysis: Extracts features like file size, entropy, entry points, and YARA rule matches.
    - Clustering: Uses algorithms (e.g., KMeans, HDBSCAN) to group malware samples by similarity.
    - Visualization: Generates PCA plots to highlight cluster separations and dominant features.
    - Feature Importance: Identifies the most influential features driving cluster differentiation.
    - Outlier Detection: Flags anomalous samples for deeper analysis.

    Practical Applications:
    - Malware family categorization (e.g., ransomware vs. info-stealers).
    - Detection of new or emerging malware campaigns.
    - Attribution to potential threat actors based on shared traits.
    - Refinement of detection rules using insights from cluster features.

    This workflow is extensible and can integrate additional feature types (e.g., dynamic analysis) or threat intelligence enrichment.

    Example Use Case:
    - Cluster a dataset of packed and unpacked malware samples to identify families, detect anomalies,
      and prioritize samples for further analysis.
    """

    def detect_outliers(self, data, cluster_labels, model):
        """
        Detect outliers by calculating distances to cluster centroids.

        Parameters:
            data (pd.DataFrame): Preprocessed feature data.
            cluster_labels (array-like): Cluster labels for the data.
            model: The clustering model (e.g., KMeans).

        Returns:
            pd.DataFrame: Dataframe with distances and a boolean indicating outliers.
        """
        # Calculate distances to cluster centroids
        distances = np.linalg.norm(data.values - model.cluster_centers_[cluster_labels], axis=1)
        
        # Compute a threshold for outliers (e.g., top 5% farthest points)
        threshold = np.percentile(distances, 95)  # Adjust percentile as needed
        outlier_flags = distances > threshold

        # Combine results into a dataframe
        results = pd.DataFrame({
            "distance_to_centroid": distances,
            "is_outlier": outlier_flags
        })
        return results

    def compute_feature_importance(self, data, cluster_labels):
        """
        Compute feature importance using a Random Forest classifier.

        Parameters:
            data (pd.DataFrame): Preprocessed feature data.
            cluster_labels (array-like): Cluster labels for the data.

        Returns:
            pd.Series: Feature importance scores for all features.
        """
        # Train a random forest with cluster labels as targets
        rf = RandomForestClassifier(random_state=42)
        rf.fit(data, cluster_labels)

        # Extract feature importances
        importance = pd.Series(rf.feature_importances_, index=data.columns)
        return importance.sort_values(ascending=False)

    def run(self):
        """
        Main workflow for clustering malware samples.
        """
        # Extract features
        data_path = self.config["general"]["data_path"]
        feature_data = self.extract_features(self.config, data_path)

        # Preprocess features
        preprocessed_data = self.preprocess_features(feature_data)

        # Perform clustering
        model, cluster_labels = self.perform_clustering(preprocessed_data)

        # Analyze and evaluate clusters
        self.analyze_clusters(preprocessed_data, cluster_labels)
        self.evaluate_clustering(preprocessed_data, cluster_labels)

        # Compute feature importance
        feature_importance = self.compute_feature_importance(preprocessed_data, cluster_labels)
        print("Feature Importance:\n", feature_importance.head(10))

        # Detect outliers
        outlier_results = self.detect_outliers(preprocessed_data, cluster_labels, model) 
        print("Outliers Detected:\n", outlier_results[outlier_results["is_outlier"]].head())

        # Save results
        self.save_results(preprocessed_data, cluster_labels, file_suffix="MalwareClusteringWorkflow-clustering_results.csv")

        # Visualize clusters
        if self.config["clustering"]["visualize"]["pca"]:
            visualize_clusters_pca(preprocessed_data, cluster_labels, self.output_path)

        print("Malware clustering workflow completed.")
