import pandas as pd
import numpy as np
import logging

from workflows.base_workflow import BaseWorkflow
from core.visualization.cluster_visualization import visualize_clusters_pca

from sklearn.ensemble import RandomForestClassifier

class MalwareClusteringWorkflow(BaseWorkflow):
    """
     A workflow designed to analyze and cluster malware samples based on extracted features.

    Goals:
    - Group malware samples into clusters based on shared characteristics (e.g., file size, entropy, YARA matches).
    - Identify relationships between malware families, shared toolkits, or development patterns.
    - Detect emerging threats or anomalies not fitting into existing clusters.
    - Provide insights for threat attribution and proactive defense.

    Key Capabilities:
    - Static Feature Analysis: Extracts features like file size, entropy, entry points, and YARA rule matches.
    - Clustering: Uses algorithms (e.g., KMeans, HDBSCAN) to group malware samples by similarity.
    - Visualization: Generates PCA plots to highlight cluster separations and dominant features.
    - Feature Importance: Identifies the most influential features driving cluster differentiation.
    - Outlier Detection: Flags anomalous samples for deeper analysis.

    Practical Applications:
    - Malware family categorization (e.g., ransomware vs. info-stealers).
    - Detection of new or emerging malware campaigns.
    - Attribution to potential threat actors based on shared traits.
    - Refinement of detection rules using insights from cluster features.

    This workflow is extensible and can integrate additional feature types (e.g., dynamic analysis) or threat intelligence enrichment.

    Example Use Case:
    - Cluster a dataset of packed and unpacked malware samples to identify families, detect anomalies, and prioritize samples for further analysis.
    """

    def detect_outliers(self, data, cluster_labels, model):
        """
        Detect outliers by calculating distances to cluster centroids.

        This function is important in malware analysis for the following reasons:
        1. **Identifying anomalous samples:** Outliers may represent rare or novel malware strains, misclassified samples, 
        or corrupted data. Detecting these anomalies can provide insights into new or less-understood threats.
        2. **Improving clustering accuracy:** By identifying and potentially removing outliers, the quality of cluster assignments 
        can be improved, leading to more reliable groupings of malware samples.
        3. **Threat detection:** Outliers might signal malware with unique or evasive characteristics, 
        such as obfuscated code or uncommon attack patterns, that deviate from known clusters.
        4. **Guiding further investigation:** Highlighting outliers allows security analysts to focus their efforts 
        on samples that require deeper analysis, which could uncover novel attack techniques or undetected campaigns.

        Parameters:
            data (pd.DataFrame): Preprocessed feature data.
            cluster_labels (array-like): Cluster labels for the data.
            model: The clustering model (e.g., KMeans).

        Returns:
            pd.DataFrame: Dataframe with distances and a boolean indicating outliers.
        """
        # Calculate distances to cluster centroids
        distances = np.linalg.norm(data.values - model.cluster_centers_[cluster_labels], axis=1)
        
        # Compute a threshold for outliers (e.g., top 5% farthest points)
        threshold = np.percentile(distances, 95)  # Adjust percentile as needed
        outlier_flags = distances > threshold

        # Combine results into a dataframe
        results = pd.DataFrame({
            "distance_to_centroid": distances,
            "is_outlier": outlier_flags
        })
        return results

    def compute_feature_importance(self, data, cluster_labels):
        """
        Compute feature importance using a Random Forest classifier.

        This function is critical in malware analysis for the following reasons:
        1. **Feature interpretation:** After clustering malware samples, it is important to understand which features 
        contributed most to differentiating between clusters. This insight helps in identifying key characteristics 
        of different malware families or behaviors.
        2. **Prioritizing analysis:** Knowing which features are most important allows security analysts to focus 
        on the most significant attributes during further investigation or when designing detection systems.
        3. **Improving models:** The results can guide feature selection for future models, improving their efficiency 
        and accuracy by focusing only on the most relevant features.
        4. **Domain knowledge enrichment:** The analysis of feature importance provides valuable feedback, 
        which can validate or enhance domain-specific knowledge about malware traits.

        Parameters:
            data (pd.DataFrame): Preprocessed feature data.
            cluster_labels (array-like): Cluster labels for the data.

        Returns:
            pd.Series: Feature importance scores for all features.
        """
        # Train a random forest with cluster labels as targets
        rf = RandomForestClassifier(random_state=42)
        rf.fit(data, cluster_labels)

        # Extract feature importances
        importance = pd.Series(rf.feature_importances_, index=data.columns)
        return importance.sort_values(ascending=False)
    
    def identify_relationships(self, data, cluster_labels, similarity_threshold=0.7):
        """
        Identify relationships between malware families, shared toolkits, or development patterns.

        The Cluster Relationship Matrix output represents the similarity relationships between clusters based on a threshold (in this case, 0.70).
        Here’s how to interpret it:

        Explanation of the Output
            - Matrix Structure:
                - The rows and columns correspond to cluster IDs (e.g., 0, 1, 2, 3, 4).
                - Each cell indicates whether the clusters in the corresponding row and column are related based on the similarity threshold.
            - Values in the Matrix:
                - A value of 1 means the clusters are related (similarity ≥ 0.70).
                - A value of 0 means the clusters are not related (similarity < 0.70).
            - Diagonal Values:
                - The diagonal always contains 1 because each cluster is 100% similar to itself.
            - Off-Diagonal Values:
                - All off-diagonal values are 0, indicating that no clusters have a similarity score ≥ 0.70.

        Parameters:
            data (pd.DataFrame): Preprocessed feature data.
            cluster_labels (array-like): Cluster labels for the data.
            similarity_threshold (float): Threshold to consider clusters as related (default is 0.7).

        Returns:
            pd.DataFrame: Relationship matrix showing similarities between clusters.
        """
        # Compute mean feature values for each cluster
        cluster_means = data.groupby(cluster_labels).mean()

        # Calculate pairwise similarity using cosine similarity
        from sklearn.metrics.pairwise import cosine_similarity
        similarity_matrix = cosine_similarity(cluster_means)        

        # Convert to DataFrame for better interpretability
        similarity_df = pd.DataFrame(
            similarity_matrix,
            index=cluster_means.index,
            columns=cluster_means.index
        )

        # Identify related clusters based on similarity threshold
        relationships = (similarity_df >= similarity_threshold).astype(int)
        return relationships, similarity_threshold

    def run(self):
        """
        Main workflow for clustering malware samples.
        """

        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[
                logging.StreamHandler(),  # Output logs to console
                logging.FileHandler("malware_clustering.log")
            ]
        )

        logging.info("Starting malware clustering workflow...")

        data_path = self.config["general"]["data_path"]
        feature_data = self.extract_features(self.config, data_path)

        logging.debug("Preprocessing feature data...")
        preprocessed_data = self.preprocess_features(feature_data)

        logging.debug("Performing clustering...")
        model, cluster_labels = self.perform_clustering(preprocessed_data)

        logging.debug("Analyzing clusters...")
        cluster_composition, top_features_by_variance = self.analyze_clusters(preprocessed_data, cluster_labels)
        
        logging.debug("Evaluating clustering...")
        silhouette_score = self.evaluate_clustering(preprocessed_data, cluster_labels)

        logging.debug("Computing feature importance...")
        feature_importance = self.compute_feature_importance(preprocessed_data, cluster_labels)

        logging.debug("Detecting outliers...")
        outlier_results = self.detect_outliers(preprocessed_data, cluster_labels, model) 

        logging.debug("Identifying relationships between clusters...")
        relationships, similarity_threshold = self.identify_relationships(preprocessed_data, cluster_labels)

       
        logging.info(f"Silhouette Score: {silhouette_score:.4f} (Closer to 1 indicates better-defined clusters)")
        logging.info("Cluster Composition: (Cluster - Number of Items)\n{}".format(cluster_composition))    
        logging.info("Top Features by Variance Across Clusters:\n{}".format(top_features_by_variance))
    

        #logging.info("Feature Importance:\n%s", feature_importance.head(10))           
        #logging.info("Outliers Detected:\n%s", outlier_results[outlier_results["is_outlier"]].head())
        #logging.info("Cluster Relationship Matrix (Similarity >= {:.2f}):".format(similarity_threshold))
        #logging.info("\n{}".format(relationships))



        logging.debug("Saving clustering results...")
        output_file = self.save_results(preprocessed_data, cluster_labels, file_suffix="MalwareClusteringWorkflow-clustering_results.csv")
        logging.info(f"Clustering results saved to: {output_file}")

        if self.config["clustering"]["visualize"]["pca"]:
            visualize_clusters_pca(preprocessed_data, cluster_labels, self.output_path)

        logging.info("Malware clustering workflow completed.")
