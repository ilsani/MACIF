import pandas as pd
import numpy as np
import logging

from workflows.base_workflow import BaseWorkflow
from core.clustering.cluster_manager import ClusterManager

class MalwareClusteringWorkflow(BaseWorkflow):
    """
     A workflow designed to analyze and cluster malware samples based on extracted features.

    Goals:
    - Group malware samples into clusters based on shared characteristics (e.g., file size, entropy, YARA matches).
    - Identify relationships between malware families, shared toolkits, or development patterns.
    - Detect emerging threats or anomalies not fitting into existing clusters.
    - Provide insights for threat attribution and proactive defense.

    Key Capabilities:
    - Static Feature Analysis: Extracts features like file size, entropy, entry points, and YARA rule matches.
    - Clustering: Uses algorithms (e.g., KMeans, HDBSCAN) to group malware samples by similarity.
    - Visualization: Generates PCA plots to highlight cluster separations and dominant features.
    - Feature Importance: Identifies the most influential features driving cluster differentiation.
    - Outlier Detection: Flags anomalous samples for deeper analysis.

    Practical Applications:
    - Malware family categorization (e.g., ransomware vs. info-stealers).
    - Detection of new or emerging malware campaigns.
    - Attribution to potential threat actors based on shared traits.
    - Refinement of detection rules using insights from cluster features.

    This workflow is extensible and can integrate additional feature types (e.g., dynamic analysis) or threat intelligence enrichment.

    Example Use Case:
    - Cluster a dataset of packed and unpacked malware samples to identify families, detect anomalies, and prioritize samples for further analysis.
    """

    def run(self):
        """
        Main workflow for clustering malware samples.
        """

        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[
                logging.StreamHandler(),  # Output logs to console
                logging.FileHandler("malware_clustering.log")
            ]
        )

        logging.info("Starting malware clustering workflow...")

        data_path = self.config["general"]["data_path"]
        all_features = self.extract_features(self.config, data_path)
        features = self.preprocess_features(all_features)

        cm = ClusterManager(self.config) \
            .perform_clustering(features) \
                .evaluate_clustering(features) \
                    .evaluate_feature_importance(features)
       
        feature_importance_comparison_description = cm.get_feature_importance_comparison_description()
        logging.info("{}".format(feature_importance_comparison_description))

        outliers_description = cm.detect_outliers(features).describe_outliers()
        logging.info("{}".format(outliers_description))
        
        cm_output_path = self.config["general"]["output_path"]
        cm_output_file = cm.save_results(features, cm_output_path, "MalwareClusteringWorkflow-clustering_results")
        logging.info(f"Clustering results saved to: {cm_output_file}")

        if self.config["clustering"]["visualize"]["pca"]:
            pca_output_file = cm.visualize_clusters_pca(features, cm_output_path, "MalwareClusteringWorkflow-pca_clusters")
            logging.info(f"PCA cluster visualization saved to: {pca_output_file}")

        logging.info("Malware clustering workflow completed.")
